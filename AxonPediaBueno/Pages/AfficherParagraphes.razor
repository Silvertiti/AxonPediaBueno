@page "/liste-articles"
@using AxonPediaBueno.Models
@using AxonPediaBueno.Data
@using Microsoft.EntityFrameworkCore
@using AxonPediaBueno.Helpers
@using Microsoft.AspNetCore.Components.Web
@inject ApplicationDbContext DbContext

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

<div class="container-fluid my-4">
    <div class="row">
        <!-- Panneau de gauche : Barre de recherche et liste des articles filtrés -->
        <div class="col-md-3">
            <h4>Articles</h4>
            <!-- Barre de recherche -->
            <input type="text" placeholder="Rechercher..." @bind="searchTerm" class="form-control mb-3" />

            <ul class="list-group">
                @foreach (var article in FilteredArticles)
                {
                    <li class="list-group-item @(selectedArticle?.Id == article.Id ? "active" : "")"
                        style="cursor: pointer;"
                        @onclick="@(() => SelectArticle(article.Id))">
                        @article.NomArticle
                    </li>
                }
            </ul>
        </div>

        <!-- Panneau de droite : Affichage du contenu de l'article sélectionné -->
        <div class="col-md-9">
            @if (selectedArticle != null)
            {
                <h2>@selectedArticle.NomArticle</h2>
                <p><em>@selectedArticle.TypeArticle</em></p>
                <hr />
                <div>
                    @((MarkupString)TextFormatter.ConvertTextWithFormatting(selectedArticle.Contenu ?? "Aucun contenu."))
                </div>
            }
            else
            {
                <p>Cliquez sur un article dans la liste pour afficher son contenu.</p>
            }
        </div>
    </div>
</div>

@code {
    private List<Paragraphe> articles = new List<Paragraphe>();
    private Paragraphe? selectedArticle;
    private string searchTerm = "";

    // Propriété calculée pour filtrer les articles par nom (insensible à la casse)
    private IEnumerable<Paragraphe> FilteredArticles => string.IsNullOrWhiteSpace(searchTerm)
        ? articles
        : articles.Where(a => a.NomArticle.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        // Chargement de la liste complète des articles depuis la base de données
        articles = await DbContext.Paragraphes.ToListAsync();
    }

    private void SelectArticle(int id)
    {
        selectedArticle = articles.FirstOrDefault(a => a.Id == id);
    }
}
