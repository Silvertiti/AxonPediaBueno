@page "/liste-articles"
@using AxonPediaBueno.Models
@using AxonPediaBueno.Data
@using Microsoft.EntityFrameworkCore
@using AxonPediaBueno.Helpers
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject ApplicationDbContext DbContext
@inject IJSRuntime JS

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous" />

<style>
    .fullscreen-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 9999;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.95);
        justify-content: center;
        align-items: center;
        cursor: zoom-out;
    }

        .fullscreen-modal.show {
            display: flex;
        }

        .fullscreen-modal img {
            max-width: 95%;
            max-height: 95%;
            object-fit: contain;
            box-shadow: 0 0 25px rgba(255, 255, 255, 0.9);
            transition: transform 0.3s ease-in-out;
        }

    .clickable-image {
        cursor: zoom-in;
        transition: transform 0.2s;
    }

        .clickable-image:hover {
            transform: scale(2.5);
        }
</style>

<div class="container-fluid my-4">
    <div class="row">
        <div class="col-md-3">
            <h4>Articles</h4>
            <input type="text" class="form-control mb-3" placeholder="Rechercher..." @bind="searchTerm" />

            <ul class="list-group">
                @foreach (var article in FilteredArticles)
                {
                    <li class="list-group-item @(selectedArticle?.Id == article.Id ? "active" : "")"
                        style="cursor:pointer;"
                        @onclick="@(() => SelectArticle(article.Id))">
                        @article.NomArticle
                    </li>
                }
            </ul>
        </div>

        <div class="col-md-9">
            @if (selectedArticle != null)
            {
                <h2>@selectedArticle.NomArticle</h2>
                <p><em>@selectedArticle.TypeArticle</em></p>
                <hr />
                <div @ref="contenuHtml">
                    @((MarkupString)TextFormatter.ConvertTextWithFormatting(selectedArticle.Contenu ?? "Aucun contenu."))
                </div>
            }
            else
            {
                <p>Cliquez sur un article dans la liste pour afficher son contenu.</p>
            }
        </div>
    </div>
</div>

<!-- Modal plein écran -->
<div id="fullscreenImageModal" class="fullscreen-modal" @onclick="CloseModal">
    <img id="fullscreenImage" src="" />
</div>

@code {
    private List<Paragraphe> articles = new();
    private Paragraphe? selectedArticle;
    private string searchTerm = "";
    private ElementReference contenuHtml;

    private IEnumerable<Paragraphe> FilteredArticles =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? articles
            : articles.Where(a => a.NomArticle.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        articles = await DbContext.Paragraphes.ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupImageZoom");
        }
    }

    private void SelectArticle(int id)
    {
        selectedArticle = articles.FirstOrDefault(a => a.Id == id);
    }

    private async Task CloseModal()
    {
        await JS.InvokeVoidAsync("hideFullscreenImage");
    }
}
