@page "/liste-articles"
@using AxonPediaBueno.Models
@using AxonPediaBueno.Data
@using Microsoft.EntityFrameworkCore
@using AxonPediaBueno.Helpers
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject ApplicationDbContext DbContext
@inject IJSRuntime JS

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet" crossorigin="anonymous" />

<style>
    .category-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: .5rem;
        background: #f1f9ff;
        cursor: pointer;
        border-radius: 4px;
    }

        .category-header:hover {
            background: #e1f4ff;
        }

    .list-group-flush > .list-group-item {
        padding-left: 1.5rem;
    }

    .fullscreen-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,0.95);
        justify-content: center;
        align-items: center;
        cursor: zoom-out;
        z-index: 9999;
    }

        .fullscreen-modal.show {
            display: flex;
        }

        .fullscreen-modal img {
            max-width: 95%;
            max-height: 95%;
            object-fit: contain;
        }

    .clickable-image {
        cursor: zoom-in;
        transition: transform .2s;
    }

        .clickable-image:hover {
            transform: scale(2.5);
        }
</style>

<div class="container-fluid my-4">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
            <h4>Articles par type</h4>
            <input class="form-control mb-3"
                   placeholder="Rechercher..."
                   @bind="SearchTerm" />

            @foreach (var group in GroupedArticles)
            {
                <div class="mb-3 border rounded">
                    <div class="category-header"
                         @onclick="() => ToggleGroup(group.Key)">
                        <strong>@group.Key</strong>
                        <span>@(expandedGroups.Contains(group.Key) ? "−" : "+")</span>
                    </div>

                    @if (expandedGroups.Contains(group.Key))
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var art in group)
                            {
                                <li class="list-group-item @(selectedArticle?.Id == art.Id ? "active" : "")"
                                    @onclick="() => SelectArticle(art.Id)"
                                    style="cursor:pointer;">
                                    @art.NomArticle
                                </li>
                            }
                        </ul>
                    }
                </div>
            }
        </div>

        <div class="col-md-9">
            @if (selectedArticle != null)
            {
                <h2>@selectedArticle.NomArticle</h2>
                <p><em>@selectedArticle.TypeArticle</em></p>
                <hr />
                <div>
                    @((MarkupString)TextFormatter.ConvertTextWithFormatting(selectedArticle.Contenu ?? "Aucun contenu."))
                </div>
            }
            else
            {
                <p class="text-muted">Cliquez sur un article pour afficher son contenu.</p>
            }
        </div>
    </div>
</div>
<div id="fullscreenImageModal" class="fullscreen-modal" @onclick="CloseModal">
    <img id="fullscreenImage" src="" />
</div>

<script>
    window.setupImageZoom = () => {
        document.querySelectorAll('img').forEach(img => {
            if (!img.classList.contains('clickable-image')) {
                img.classList.add('clickable-image');
                img.addEventListener('click', () => {
                    const m = document.getElementById('fullscreenImageModal');
                    const mi = document.getElementById('fullscreenImage');
                    mi.src = img.src;
                    m.classList.add('show');
                });
            }
        });
    };
    window.hideFullscreenImage = () => {
        const m = document.getElementById('fullscreenImageModal');
        m.classList.remove('show');
        document.getElementById('fullscreenImage').src = '';
    };
</script>

@code {
    private List<Paragraphe> articles = new();
    private Paragraphe? selectedArticle;
    private readonly HashSet<string> expandedGroups = new();
    private string searchTerm = "";

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;

            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                expandedGroups.Clear();
            }
            else
            {
                expandedGroups.Clear();
                foreach (var grp in GroupedArticles)
                    expandedGroups.Add(grp.Key);
            }
        }
    }

    private IEnumerable<IGrouping<string, Paragraphe>> GroupedArticles =>
      articles
         .Where(a =>
            string.IsNullOrWhiteSpace(searchTerm)
            || a.NomArticle.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
         .GroupBy(a =>
            string.IsNullOrWhiteSpace(a.TypeArticle)
            ? "Sans catégorie"
            : a.TypeArticle)
         .OrderBy(g => g.Key);

    protected override async Task OnInitializedAsync()
    {
        articles = await DbContext.Paragraphes.ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("setupImageZoom");
    }

    private void ToggleGroup(string key)
    {
        if (expandedGroups.Contains(key)) expandedGroups.Remove(key);
        else expandedGroups.Add(key);
    }

    private void SelectArticle(int id) =>
      selectedArticle = articles.FirstOrDefault(a => a.Id == id);

    private async Task CloseModal() =>
      await JS.InvokeVoidAsync("hideFullscreenImage");
}
