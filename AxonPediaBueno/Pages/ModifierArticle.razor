@page "/modifier-articles"
@using AxonPediaBueno.Models
@using AxonPediaBueno.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using AxonPediaBueno.Helpers
@inject ApplicationDbContext DbContext
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.IO

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">

<style>
    .input-small {
        font-size: 0.8rem;
    }
</style>

<div class="container my-4 p-4 border rounded" style="max-width: 1200px; margin: auto;">
    <h3 class="mb-4">Modifier un article</h3>

    <div class="row mb-4">
        <div class="col">
            <label for="selectArticle" class="form-label">Choisir un article à modifier :</label>
            <select id="selectArticle" class="form-select" @onchange="OnArticleSelected">
                <option value="">-- Sélectionnez un article --</option>
                @foreach (var article in articles)
                {
                    <option value="@article.Id">@article.NomArticle</option>
                }
            </select>
        </div>
    </div>

    @if (selectedParagraphe != null)
    {
        <EditForm Model="selectedParagraphe" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="NomArticle" class="form-label">Nom de l'article</label>
                    <InputText id="NomArticle" class="form-control input-small" @bind-Value="selectedParagraphe.NomArticle" />
                    <ValidationMessage For="@(() => selectedParagraphe.NomArticle)" />
                </div>
                <div class="col-md-6">
                    <label for="TypeArticle" class="form-label">Type d'article</label>
                    <InputText id="TypeArticle" class="form-control input-small" @bind-Value="selectedParagraphe.TypeArticle" />
                    <ValidationMessage For="@(() => selectedParagraphe.TypeArticle)" />
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <select class="form-select" @onchange="OnDropdownChanged">
                        <option value="">-- Ajouter un style de texte --</option>
                        <option value="AjouterGras">Ajouter Texte en Gras</option>
                        <option value="AjouterItalique">Ajouter Texte en Italique</option>
                        <option value="AjouterWeb">Ajouter Lien Hypertexte</option>
                        <option value="AjouterListeNonOrdonnee">Ajouter Liste à Puces</option>
                        <option value="AjouterTitre1">Ajouter Titre Niveau 1</option>
                        <option value="AjouterTitre2">Ajouter Titre Niveau 2</option>
                        <option value="AjouterTitre3">Ajouter Titre Niveau 3</option>
                        <option value="AjouterTitre4">Ajouter Titre Niveau 4</option>
                        <option value="AjouterTitre5">Ajouter Titre Niveau 5</option>
                    </select>
                </div>

                <div class="col-md-6 d-flex align-items-end">
                    <InputFile OnChange="HandleFileUpload" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <label for="Contenu" class="form-label">Contenu</label>
                    <InputTextArea id="Contenu" class="form-control input-small"
                                   @bind-Value="selectedParagraphe.Contenu"
                                   style="height:400px; overflow-y:auto;" />

                    <div class="mt-3">
                        <button type="submit" class="btn btn-success">Enregistrer les modifications</button>
                        <button type="button" class="btn btn-secondary ms-2" @onclick="Test">Actualiser</button>
                    </div>

                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert alert-success mt-3">@message</div>
                    }
                </div>

                <div class="col-md-6">
                    <label for="Rendu" class="form-label">Rendu</label>
                    <div class="border p-3" style="min-height:360px;">
                        <div style="height:360px; overflow-y:auto;">
                            @if (!string.IsNullOrEmpty(contenuAffiche))
                            {
                                @((MarkupString)contenuAffiche)
                            }
                            else
                            {
                                <em>Le contenu formaté apparaîtra ici après avoir cliqué sur Actualiser.</em>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    private List<Paragraphe> articles = new();
    private Paragraphe? selectedParagraphe;
    private string message = "";
    private string contenuAffiche = "";

    protected override async Task OnInitializedAsync()
    {
        articles = await DbContext.Paragraphes.ToListAsync();
    }

    private async void OnArticleSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            selectedParagraphe = await DbContext.Paragraphes.FirstOrDefaultAsync(p => p.Id == id);
            contenuAffiche = TextFormatter.ConvertTextWithFormatting(selectedParagraphe?.Contenu ?? "");
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        DbContext.Paragraphes.Update(selectedParagraphe);
        await DbContext.SaveChangesAsync();
        message = "Article modifié avec succès !";
    }

    private void Test()
    {
        contenuAffiche = TextFormatter.ConvertTextWithFormatting(selectedParagraphe?.Contenu ?? "");
    }

    private void OnDropdownChanged(ChangeEventArgs e)
    {
        var action = e.Value?.ToString();
        switch (action)
        {
            case "AjouterTitre1": AjouterTitre(1); break;
            case "AjouterTitre2": AjouterTitre(2); break;
            case "AjouterTitre3": AjouterTitre(3); break;
            case "AjouterTitre4": AjouterTitre(4); break;
            case "AjouterTitre5": AjouterTitre(5); break;
            case "AjouterGras": AjouterGras(); break;
            case "AjouterItalique": AjouterItalique(); break;
            case "AjouterWeb": AjouterWeb(); break;
            case "AjouterListeNonOrdonnee": AjouterListeNonOrdonnee(); break;
        }
    }

    private void AjouterWeb() => selectedParagraphe.Contenu += "\n[web]Nom du Lien @ Lien;";
    private void AjouterItalique() => selectedParagraphe.Contenu += "\n[ita]Texte en Italique;";
    private void AjouterGras() => selectedParagraphe.Contenu += "\n[g]Texte en Gras;";
    private void AjouterTitre(int niveau) => selectedParagraphe.Contenu += $"\n[t{niveau}]Titre niveau {niveau};";
    private void AjouterListeNonOrdonnee() => selectedParagraphe.Contenu += "\n[ul]\n- Élément 1\n- Élément 2\n- Élément 3\n;";

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var fileName = Path.GetRandomFileName() + Path.GetExtension(file.Name);
            var uploadPath = Path.Combine("wwwroot", "uploads");
            if (!Directory.Exists(uploadPath))
                Directory.CreateDirectory(uploadPath);

            var filePath = Path.Combine(uploadPath, fileName);
            await using var fs = new FileStream(filePath, FileMode.Create);
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(fs);

            var publicUrl = $"/uploads/{fileName}";
            selectedParagraphe.Contenu += $"\n[img]{publicUrl};";
        }
    }
}