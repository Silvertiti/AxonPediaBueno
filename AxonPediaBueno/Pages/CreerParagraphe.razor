@page "/creer-paragraphe"
@using AxonPediaBueno.Models
@using AxonPediaBueno.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@inject ApplicationDbContext DbContext

<h3>Créer un nouveau paragraphe</h3>

<EditForm Model="nouveauParagraphe" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Contenu">Contenu :</label>
        <InputTextArea id="Contenu" class="form-control"
                       @bind-Value="nouveauParagraphe.Contenu"
                       style="width:100%; height:500px;" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Créer le paragraphe</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-success mt-3">
        @message
    </div>
}

@if (dernierParagraphe != null)
{
    <div class="alert alert-info mt-3">
        <h4>Dernier paragraphe créé :</h4>
        <p>@((MarkupString)ConvertTextWithFormatting(dernierParagraphe.Contenu))</p>
    </div>
}

@code {
    private Paragraphe nouveauParagraphe = new Paragraphe();
    private Paragraphe dernierParagraphe;
    private string message;

    private async Task HandleValidSubmit()
    {
        DbContext.Paragraphes.Add(nouveauParagraphe);
        await DbContext.SaveChangesAsync();

        message = "Paragraphe créé avec succès !";

        dernierParagraphe = await DbContext.Paragraphes
                                .OrderByDescending(p => p.Id)
                                .FirstOrDefaultAsync();

        nouveauParagraphe = new Paragraphe();
    }

    private string ConvertTextWithFormatting(string input)
    {
        string result = input;

        result = Regex.Replace(result, @"\[t\](.*?)\;", "<h1>$1</h1>");

        result = Regex.Replace(result, @"\[s-t\](.*?)\;", "<h2>$1</h2>");

        result = Regex.Replace(result, @"\[ita\](.*?)\;", "<em>$1</em>");

        result = Regex.Replace(result, @"\[g\](.*?)\;", "<strong>$1</strong>");
        result = Regex.Replace(result, @"\[web\](.+?)\s*@\s*(.+?)\;", m =>
        {
            string title = m.Groups[1].Value.Trim();
            string url = m.Groups[2].Value.Trim();
            return $"<a href=\"{url}\" target=\"_blank\">{title}</a>";
        });

        result = result.Replace("\r\n", "<br />").Replace("\n", "<br />");

        return result;
    }
}
