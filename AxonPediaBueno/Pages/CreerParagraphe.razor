@page "/creer-articles"
@using AxonPediaBueno.Models
@using AxonPediaBueno.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using AxonPediaBueno.Helpers
@inject ApplicationDbContext DbContext
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"crossorigin="anonymous">

<style>
    .input-small {
        font-size: 0.8rem;
    }
</style>

<div class="container my-4 p-4 border rounded" style="max-width: 1200px; margin: auto;">
    <h3 class="mb-4">Créer un nouveau Articles</h3>

    <EditForm Model="nouveauParagraphe" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="NomArticle" class="form-label">Nom de l'article</label>
                <InputText id="NomArticle" class="form-control input-small" @bind-Value="nouveauParagraphe.NomArticle" />
                <ValidationMessage For="@(() => nouveauParagraphe.NomArticle)" />
            </div>
            <div class="col-md-6">
                <label for="TypeArticle" class="form-label">Type d'article</label>
                <InputText id="TypeArticle" class="form-control input-small" @bind-Value="nouveauParagraphe.TypeArticle" />
                <ValidationMessage For="@(() => nouveauParagraphe.TypeArticle)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col">
                <select class="form-select input-small" aria-label="Sélectionner un style" @onchange="OnDropdownChanged">
                    <option value="">-- Ajouter Style de texte --</option>
                    <option value="AjouterTitre">Ajouter Titre</option>
                    <option value="AjouterSousTitre">Ajouter Sous Titre</option>
                    <option value="AjouterGras">Ajouter Texte en Gras</option>
                    <option value="AjouterItalique">Ajouter Texte en Italique</option>
                    <option value="AjouterWeb">Ajouter lien HyperTexte</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="Contenu" class="form-label">Contenu</label>
                    <InputTextArea id="Contenu" class="form-control input-small"
                                   @bind-Value="nouveauParagraphe.Contenu"
                                   style="height:400px; overflow-y:auto;" />
                </div>
                <div class="mt-2">
                    <button type="submit" class="btn btn-primary">Créer le paragraphe</button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="Test">Actualiser</button>
                </div>
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="alert alert-success mt-3">@message</div>
                }
            </div>

            <div class="col-md-6">
                <div class="mb-2">
                    <label for="Rendu" class="form-label">Rendu</label>
                </div>
                <div class="border p-3" style="min-height:360px;">
                    <div style="height:360px; overflow-y:auto;">
                        @if (!string.IsNullOrEmpty(contenuAffiche))
                        {
                            @((MarkupString)contenuAffiche)
                        }
                        else
                        {
                            <em>Le contenu formaté apparaîtra ici après avoir cliqué sur Actualiser.</em>
                        }
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private Paragraphe nouveauParagraphe = new Paragraphe();
    private string message;
    private string contenuAffiche = "";

    private async Task HandleValidSubmit()
    {
        DbContext.Paragraphes.Add(nouveauParagraphe);
        await DbContext.SaveChangesAsync();
        message = "Paragraphe créé avec succès !";
        nouveauParagraphe = new Paragraphe();
    }

    private void Test()
    {
        contenuAffiche = TextFormatter.ConvertTextWithFormatting(nouveauParagraphe.Contenu);
    }

    private void OnDropdownChanged(ChangeEventArgs e)
    {
        var action = e.Value?.ToString();
        switch (action)
        {
            case "AjouterTitre":AjouterTitre();break;
            case "AjouterSousTitre":AjouterSousTitre();break;
            case "AjouterGras":AjouterGras();break;
            case "AjouterItalique":AjouterItalique();break;
            case "AjouterWeb":AjouterWeb();break;
        }
    }

    private void AjouterWeb() { nouveauParagraphe.Contenu += "\n[web]Nom du Lien @ Lien;"; }
    private void AjouterItalique() { nouveauParagraphe.Contenu += "\n[ita]Texte en Italique;"; }
    private void AjouterGras() { nouveauParagraphe.Contenu += "\n[g]Texte en Gras;"; }
    private void AjouterSousTitre() { nouveauParagraphe.Contenu += "\n[s-t]Titre;"; }
    private void AjouterTitre() { nouveauParagraphe.Contenu += "\n[t]Titre;"; }
}
