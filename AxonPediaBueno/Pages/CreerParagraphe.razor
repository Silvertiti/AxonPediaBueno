@page "/creer-paragraphe"
@using AxonPediaBueno.Models
@using AxonPediaBueno.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@inject ApplicationDbContext DbContext
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

<h3>Créer un nouveau paragraphe</h3>
<style>
    .mt-2{
        padding-top: 10px;
    }
</style>
<div style="display: flex; align-items: flex-start; gap: 1rem;">

    <div style="flex: 1;">
        <EditForm Model="nouveauParagraphe" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div style="border: 1px solid #ccc; padding: 1rem; min-height: 400px;">
                <div class="form-group">
                    <label for="Contenu"></label>
                    <InputTextArea id="Contenu" class="form-control"
                                   @bind-Value="nouveauParagraphe.Contenu"
                                   style="width:100%; height:360px; overflow-y: auto;" />
                </div>
            </div>

            <div class="mt-2">
                <button type="submit" class="btn btn-primary">Créer le paragraphe</button>
                <button type="button" class="btn btn-secondary ml-2" @onclick="Test">
                    TEST
                </button>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-success mt-3">
                @message
            </div>
        }
    </div>

    <div style="flex: 1;">
        <div style="border: 1px solid #ccc; padding: 1rem; min-height: 360px;">
            <div style="width:100%; height:360px; overflow-y: auto;">
                @if (!string.IsNullOrEmpty(contenuAffiche))
                {
                    @((MarkupString)contenuAffiche)
                }
                else
                {
                    <em>Le contenu formaté apparaîtra ici après avoir cliqué sur TEST.</em>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Paragraphe nouveauParagraphe = new Paragraphe();
    private string message;
    private string contenuAffiche = "";

    private async Task HandleValidSubmit()
    {
        DbContext.Paragraphes.Add(nouveauParagraphe);
        await DbContext.SaveChangesAsync();

        message = "Paragraphe créé avec succès !";
        nouveauParagraphe = new Paragraphe();
    }

    private void Test()
    {
        contenuAffiche = ConvertTextWithFormatting(nouveauParagraphe.Contenu);
    }

    private string ConvertTextWithFormatting(string input)
    {
        string result = input;

        result = Regex.Replace(result, @"\[t\](.*?)\;", "<h1>$1</h1>");
        result = Regex.Replace(result, @"\[s-t\](.*?)\;", "<h2>$1</h2>");
        result = Regex.Replace(result, @"\[ita\](.*?)\;", "<em>$1</em>");
        result = Regex.Replace(result, @"\[g\](.*?)\;", "<strong>$1</strong>");
        result = Regex.Replace(result, @"\[web\](.+?)\s*@\s*(.+?)\;", m =>
        {
            string title = m.Groups[1].Value.Trim();
            string url = m.Groups[2].Value.Trim();
            return $"<a href=\"{url}\" target=\"_blank\">{title}</a>";
        });

        result = result.Replace("\r\n", "<br />").Replace("\n", "<br />");

        return result;
    }
}
